# edison setup script for use as companion computer

# STEP1 : bring up Vagrant virtual machine (this builds an entire
  Yocto image, so takes quite some time)

# e.g. on Linux:
pushd Intel_Edison/Debian
time vagrant up


# STEP2 : copy edison-src/out/linux64/build/toFlash directory back to host computer

#e.g. On Linux:
rsync -aPH vagrant@edison:edison-src/out/linux64/build/toFlash/ /tmp/edison-ToFlash

# where "edison" is either a resolvable hostname or an ip address for the Vagrant virtual machine

# STEP3 : run flashall.bat or flashall.sh from that directory on host computer

# e.g. on Linux:
pushd /tmp/edison-ToFlash
time sudo ./flashall.sh

# nb: I was unable to flash this to my Edison while it was within the PH2
#     I used the Edison/Arduino board for flashing purposes


# STEP4 : install packages
#    power on the edison
#    log onto edison
#      e.g. on linux
screen /dev/ttyUSB0 115200
# username/password is user/password

sudo rm -f /etc/apt/apt.conf.d/50proxy # may not be available

# at this point, MY LINUX HOST has a network interface corresponding
#  to the USB CDC device provided by edison.  I added an address and
#  NAT rule - on the host machine - to provide internet access to
#  edison:

IFACE=enp0s20u2u2c2
sudo ip a a 192.168.2.1/24 dev $IFACE
sudo iptables -t nat -A POSTROUTING --source 192.168.2.15/24 -j SNAT --to-source 192.168.1.196

# For those running Windows, you should be able to share your Internet
  connection with Edison to allow it to access the Internet.

# for whatever reason the FS doesnt match the partition:
sudo resize2fs /dev/mmcblk0p8

# mount the home partition on boot:
echo "/dev/mmcblk0p10     /home       auto    noauto,comment=systemd.automount,nosuid,nodev,noatime,discard     1   1" | sudo tee -a /etc/fstab
sudo mount /home # make sure that worked
sudo reboot # just to ensure we're starting clean

echo "nameserver 8.8.8.8" | sudo dd of=/etc/resolv.conf
sudo ip r a default dev usb0 via 192.168.2.1
sudo apt-get -f -y install # fix some package issues first
sudo apt-get update
sudo apt-get install -y ntpdate # clock needs setting for cert. validation
sudo ntpdate -s ntp.iinet.net.au
sudo apt-get install -y git

# proceed to install packages:
cd ~ 
sudo chown -R user.user $PWD # correct permissions
mkdir GitHub
pushd ~/GitHub
git clone https://github.com/ArduPilot/companion.git
pushd companion/Intel_Edison/Debian
sudo ./2_install_packages.sh
sudo ./3_wifi_access_point.sh
sudo reboot # wifi up needs a reboot
pushd ~/GitHub/companion/Intel_Edison/Debian
sudo ./6_setup_cmavnode.sh
sudo ./7_dflogger.sh
sudo ./5_setup_mavproxy.sh

# REMEMBER: set dataflash logging up on the autopilot!
# on a PixHawk2 with an Edison inside:
# param set SERIAL2_BAUD 921600
# param set LOG_BACKEND_TYPE 3


# take an image:
rm $HOME/.ssh/authorized_keys
rm $HOME/dflogger/dataflash/*
sudo apt-get autoremove -y
sudo apt-get clean

# on edison:
sudo bash <<'EOF'
for dirpath in /home /boot /; do
 echo "dirpath=$dirpath"
 filepath="$dirpath/zeroes"
 echo "filepath=$filepath"
 time dd if=/dev/zero of="$filepath"
 rm -f $filepath
done
EOF

# on edison, make filesystems read-only:
echo u | sudo dd of=/proc/sysrq-trigger

# on host:
nc -l 10.0.1.72 9876 | dd >edison-image-apsync-boot.hddimage
# on Edison:
time (sudo dd if=/dev/mmcblk0p7 | nc 10.0.1.72 9876) # ~14s

# on host:
nc -l 10.0.1.72 9876 | dd >edison-image-apsync-root.ext4
# on Edison:
time (sudo dd if=/dev/mmcblk0p8 | nc 10.0.1.72 9876) # ~15 minutes

# on host:
nc -l 10.0.1.72 9876 | dd >edison-image-apsync-home.ext4
# on Edison:
time (sudo dd if=/dev/mmcblk0p10 | nc 10.0.1.72 9876) # ~15 minutes

# override some files, add some convenience for Windows users
COMPANION_HOME=...
EDISON_HOME=$COMPANION_HOME/Intel_Edison/Debian
EDISON_EXTRAFILES="$EDISON_HOME/extra"
for file in flashall.bat flashall.sh dfu-util.exe libusb-1.0.dll; do
    cp $EDISON_EXTRAFILES/$file .
done

# create the tarball:
TIMESTAMP=`date '+%Y%m%d%H%M%S'`
DIRNAME=edison-apsync-ToFlash
DIRNAME_TIMESTAMPED="edison-apsync-ToFlash-$TIMESTAMP"
TARNAME="$DIRNAME_TIMESTAMPED.tar"
mv $DIRNAME $DIRNAME_TIMESTAMPED
time tar cf $TARNAME $DIRNAME_TIMESTAMPED # ~10s
mv $DIRNAME_TIMESTAMPED $DIRNAME
time xz -e $TARNAME # ~20 minutes
TARBALL="$TARNAME.xz"
scp $TARBALL autotest@autotest.ardupilot.org:APM/buildlogs/binaries/Companion/next/ # ~53 minutes

